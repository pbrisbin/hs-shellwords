#!/usr/bin/env bash
set -euo pipefail

usage() {
  cat <<'EOM'
  echo "Usage: ./bin/release verify | prepare <version> | publish <version>" >&2
EOM
}

verify_version() {
  local version=$1

  if [[ "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    echo "$version"
    return 0
  fi

  if [[ "$version" =~ ^([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)-rc.*$ ]]; then
    echo "${BASH_REMATCH[1]}"
    return 0
  fi

  echo "Invalid version $version" >&2
  exit 1
}

prepare() {
  local version=$1
  echo "Updating package.yaml to $version"
  sed -i 's/^version: .*$/version: '"$version"'/' package.yaml
  stack build --dry-run # update .cabal
}

publish() {
  local version=$1 is_candidate=$2 url

  url=https://hackage.haskell.org/package/$PACKAGE_NAME-$version

  if ((is_candidate)); then
    echo stack upload . --pvp-bounds lower --candidate >&2
    printf '{ "name": "%s v%s (candidate)", "url": "%s/candidate" }\n' \
      "$PACKAGE_NAME" "$version" "$url"
  else
    echo stack upload . --pvp-bounds lower >&2
    printf '{ "name": "%s v%s", "url": "%s" }\n' \
      "$PACKAGE_NAME" "$version" "$url"
  fi
}

if (($# != 1)) && (($# != 2)); then
  usage >&2
  exit 64
fi

case "$1" in
  verify)
    if [[ -z "${HACKAGE_KEY:-}" ]]; then
      echo "The HACKAGE_KEY environment variable must be set for stack upload"
      exit 1
    fi

    if [[ -z "${PACKAGE_NAME:-}" ]]; then
      echo "The PACKAGE_NAME environment variable must be set"
      exit 1
    fi
    ;;
  prepare)
    shift
    read -r version < <(verify_version "$1")
    prepare "$version"
    ;;
  publish)
    shift
    read -r version < <(verify_version "$1")

    if [[ "$version" != "$1" ]]; then
      # A pre-release suffix was stripped, upload as candidate
      publish "$version" 1
    else
      publish "$version" 0
    fi
    ;;
  -h|--help|help)
    usage
    exit 0
    ;;
  *)
    usage >&2
    exit 64
    ;;
esac
